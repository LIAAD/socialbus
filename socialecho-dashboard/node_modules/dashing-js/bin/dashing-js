#!/usr/bin/env node

var fs = require('fs')
  , path = require('path')
  , spawn = require('child_process').spawn
  , pkg = require('../package.json')
  , Thor = require('../lib/thor').Thor
  , utils = require('../lib/utils')
  , program = require('commander')
  , prompt = require('prompt')
  , request = require('request')
  , unzip = require('unzip');

program.version(pkg.version);

auth_token = null;
send_event = function(id, data) {
  if (auth_token) {
    data.auth_token = auth_token;
  }
  request({
      url: 'http://localhost:3030/widgets/' + id,
      method: 'POST',
      json: data
    }, function(err, res, body) {
      if (!err && res.statusCode == 204) {
        console.log('Data Sent to ' + id + ': ' + JSON.stringify(data));
      } else {
        console.error('Error sending data');
        console.error(err);
      }
  });
};

var generators = (function(types) {
  var rtn = {};
  for (var i = 0, len = types.length; i < len; i++) {
    rtn[types[i]] = (function(type) {
      return function(name) {
        Thor.directory(type, type + 's', {name: Thor.Util.dash_case(name)});
      }
    })(types[i]);
  }
  return rtn;
})(['widget', 'dashboard', 'job']);

program.command('new <project_name>')
  .description('Sets up ALL THE THINGS needed for your dashboard project.')
  .option('-f, --force', 'force on non-empty directory')
  .action(function(project_name, options) {
    project_name = Thor.Util.dash_case(project_name);
    utils.emptyDirectory(project_name, function(empty) {
      if (empty || options.force) {
        createProject(project_name);
      } else {
        prompt.start();
        prompt.get({
          name: 'yesno',
          message: 'destination is not empty, continue?',
          validator: /y[es]*|n[o]?/i,
          warning: 'Must respond yes or no',
          default: 'no'
        }, function(err, result) {
      	  if (/^y/i.test(result.yesno)) {
      	  	process.stdin.destroy();
            createProject(project_name);
      	  } else {
      	  	utils.abort('aborting');
      	  }
      	});
      }
    });
  });

program.command('generate <type> <name>')
  .description('Creates a new widget, dashboard, or job.')
  .action(function(type, name) {
    if (typeof(generators[type]) === 'function') {
      console.log('Generating %s "%s"', type, name);
      generators[type](name);
    } else {
      console.error('Invalid generator. Either use widget, dashboard, or job');
    }
  });

program.command('install <id>')
  .description('Installs a new widget from a gist or a zipball.')
  .option('-p, --proxy <proxy>', 'Use proxy')
  .action(function(id, options) {
    if (options.proxy) {
      console.log('Using proxy "%s"', options.proxy);
      request = request.defaults({proxy: options.proxy});
    }
    if (isNaN(parseInt(id, 10))) {
      console.log('Installing zip "%s"', id);
      var origDirName, widgetName;
      request({
        url: id,
        headers: {'User-Agent': pkg.name + '-' + pkg.version}
      }).pipe(unzip.Parse())
      .on('entry', function(entry) {
        if (entry.type === 'Directory' && !origDirName) {
          origDirName = entry.path;
          utils.mkdir.sync('widgets/' + origDirName);
          entry.autodrain();
        } else if (entry.type === 'File') {
          var m = entry.path.match(/(\w*)\.(coffee|html|scss)$/);
          var mj = entry.path.match(/(\w*)\.job\.(js|coffee)$/);
          if (mj) {
            console.log('      \x1b[36mcreate\x1b[0m  jobs/' + mj[0]);
            entry.pipe(fs.createWriteStream('jobs/' + mj[0]));
          } else {
            widgetName = m ? m[1] : widgetName;
            console.log('      \x1b[36mcreate\x1b[0m  widgets/' + entry.path);
            entry.pipe(fs.createWriteStream('widgets/' + entry.path));
          }
        }
      })
      .on('error', function(err) {
        console.error('Error reading zip file from: ' + id);
        err && console.error(err);
      })
      .on('close', function() {
        utils.mv.sync('widgets/' + origDirName, 'widgets/' + widgetName);
      });
    } else {
      console.log('Installing gist "%s"', id);
      var public_url = "https://gist.github.com/" + id;
      request({
        url: 'https://api.github.com/gists/' + id,
        headers: {'User-Agent': pkg.name + '-' + pkg.version}
      }, function(err, res, body) {
        if (!err && res.statusCode == 200) {
          var gist = JSON.parse(body);
          var widgetName;
          for (var k in gist.files) {
            var m = gist.files[k].filename.match(/(\w*)\.(coffee|html|scss)$/);
            if (m && !gist.files[k].filename.match(/(\w*)\.job\.coffee$/)) {
              widgetName = m[1];
              break;
            }
          }
          utils.mkdir('widgets/' + widgetName, function() {
            for (var k in gist.files) {
              var filename = gist.files[k].filename;
              var outFile = filename;
              if (filename.match(/(\w*)\.job\.(js|coffee)$/)) {
                utils.write('jobs/' + filename, gist.files[k].content);
              } else/* if(filename.match(/(\w*)\.(coffee|html|scss)$/))*/ {
                utils.write('widgets/' + widgetName + '/' + filename, gist.files[k].content);
              }
            }
            console.log('if needed. More information for this widget can be found at ' + public_url);
          });
        } else {
          console.error('Could not find gist at ' + public_url);
          res && console.error('[' + res.statusCode + '] ' + body);
          err && console.error(err);
        }
      });
    }
  });

program.command('start')
  .description('Starts the server in style!')
  .option('-p, --port <port>', 'Listen port', 3030)
  .option('-j, --job_path <path>', 'Specify the directory where jobs are stored')
  .option('-e, --view_engine <engine>', 'Specify the view engine to use (defaults to jade)')
  .option('-d, --daemon', 'Daemonize the server')
  .action(function(options) {
    var env = process.env || {};
    env.PORT = options.port;
    if (options['job_path']) {
      env.JOB_PATH = options['job_path'];
    }
    if (options['view_engine']) {
      env.VIEW_ENGINE = options['view_engine'];
    }
    env.__daemon = !!options['daemon'];
    var spawn_opts = {
      cwd: process.cwd(),
      env: env,
      stdio: 'inherit',
    };
    if (options['daemon']) {
      var outFile = fs.openSync('./out.log', 'a');
      var errFile = fs.openSync('./out.log', 'a');
      spawn_opts.stdio = ['ignore', outFile, errFile];
      spawn_opts.detached = true;
    }
    var child = spawn(process.execPath, ['server.js'], spawn_opts);
    if (options['daemon']) {
      child.unref();
      process.exit(0);
    }
    child.on('close', function(code) {
      console.log('child process exited with code ' + code);
    });
  });

program.command('job <job_name>')
  .description('Runs the specified job. Make sure to supply your auth token if you have one set.')
  .option('-a, --auth_token <token>', 'The auth_token to use')
  .action(function(job_name, options) {
    require('coffee-script');
    // Load custom libraries
    fs.readdir([process.cwd(), 'lib'].join(path.sep), function(err, files) {
      if (err) throw err;
      for (var i in files) {
        var file = [process.cwd(), 'lib', files[i]].join(path.sep);
        require(file);
      }
    });
    if (options['auth_token']) {
      auth_token = options['auth_token'];
    }
    var exts = ['js', 'coffee'];
    var err = true;
    for (var i in exts) {
      var filePath = [process.cwd(), 'jobs', job_name + '.job.' + exts[i]].join(path.sep);
      if (fs.existsSync(filePath)) {
        console.log('Loading job file:', filePath);
        require(filePath);
        err = false;
        break;
      }
    }
    if (err) console.error('No job file found for "' + job_name + '". Supported job file types:', exts);
  });

program.parse(process.argv);

function createProject(name) {
  console.log('Creating "%s"', name);
  Thor.directory('project', name, {name: name, dashing: {version: pkg.version}});
}
